name: Build all

on:
  push:
    branches:
      - main
      - release/*
    paths:
      - 'deps/**'
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'localization/**'
      - 'resources/**'
      - ".github/workflows/build_*.yml"

  pull_request:
    branches:
      - main
      - release/*

  workflow_dispatch: # allows for manual dispatch
    inputs:
      build-deps-only:
        description: 'Only build dependencies (bypasses caching)'
        type: boolean
        default: false

  release:
    types: [created] # Runs when a new release is created

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_all:
    name: Build All
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: ubuntu-24.04
          - os: windows-latest
          - os: ubuntu-22.04-arm
          - os: macos-14
            arch: x86_64
          - os: ubuntu-22.04-arm
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Fix libunwind issue (Ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get -y update
          sudo apt-get remove -y libunwind-*
          sudo apt-get -y install --no-install-recommends libgstreamer1.0-dev

      - name: Install Dependencies (Ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt install -y libmspack-dev libgstreamerd-3-dev libsecret-1-dev \
            libwebkit2gtk-4.0-dev libosmesa6-dev libssl-dev libcurl4-openssl-dev \
            eglexternalplatform-dev libudev-dev libdbus-1-dev extra-cmake-modules \
            libgtk2.0-dev libglew-dev cmake git texinfo

      - name: Build on Linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo ./BuildLinux.sh -u
          ./BuildLinux.sh -dsir

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch || 'x86_64' }}
          path: ./build/ # Adjust this path based on where your compiled binaries are stored

  release:
    name: Release Artifacts
    needs: build_all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "This is an automatic release with the latest build artifacts."
          draft: false
          prerelease: false
